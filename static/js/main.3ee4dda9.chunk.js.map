{"version":3,"sources":["Timer.js","FlipCard.js","App.js","serviceWorker.js","index.js"],"names":["Timer","className","React","props","number","imgUrl","onCardClick","flipTheCard","isFound","rollTheCard","onClick","ev","src","App","componentDidMount","_reloadGame","window","fetch","Math","floor","random","then","res","json","cards","hits","map","item","push","url","previewURL","found","concat","slice","_shuffle","setState","isLoading","showCardOnlay","_stopGame","x","setTimeout","flippedCards","_unFlipCards","state","length","clearUnflipCardsTiemout","_onCardClick","clickedCardId","clearTimeout","array","i","j","temporaryFlipCards","this","index","key","indexOf","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ee4dda9.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./Timer.scss\";\r\n\r\nconst Timer = () => {\r\n  return (\r\n    <>\r\n      <div className={\"timerContainer\"}>\r\n        <div className={\"fill\"}></div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import * as React from \"react\";\r\nimport \"./FlipCard.scss\";\r\n\r\nfunction FlipCard(props) {\r\n  const {\r\n    number,\r\n    imgUrl,\r\n    onCardClick,\r\n    flipTheCard,\r\n    isFound,\r\n    rollTheCard\r\n  } = props;\r\n  const _onButtonClick = ev => {\r\n    !flipTheCard && onCardClick(number);\r\n  };\r\n  return (\r\n    <>\r\n      {!isFound && (\r\n        <button\r\n          className={`card ${flipTheCard && \"flip-card\"} ${rollTheCard &&\r\n            \"keep-rotating-card\"}`}\r\n          onClick={_onButtonClick}\r\n        >\r\n          <div className=\"face front-face\">{number + 1}</div>\r\n          <div className=\"face back-face\">\r\n            <img src={imgUrl} className=\"img\" />\r\n          </div>\r\n        </button>\r\n      )}\r\n      {isFound && (\r\n        <div className={\"card card-border\"}>\r\n          <div className={\"center star\"}> {\"‚≠ê\"}</div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(FlipCard);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Timer from \"./Timer\";\nimport FlipCard from \"./FlipCard\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cards: [],\n      flippedCards: [],\n      temporaryFlipCards: [\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        16,\n        17,\n        18,\n        19\n      ],\n      isLoading: true,\n      showCardOnlay: true\n    };\n    this.clearUnflipCardsTiemout = null;\n  }\n  componentDidMount = () => {\n    this._reloadGame();\n  };\n\n  render() {\n    const { cards, isLoading } = this.state;\n    return (\n      <>\n        <Timer />\n        <div className=\"cardContainer\">\n          {!!cards.length && !isLoading ? (\n            <>\n              {cards.map((item, index) => (\n                <FlipCard\n                  key={index}\n                  imgUrl={item.url}\n                  number={index}\n                  flipTheCard={this.state.flippedCards.indexOf(index) !== -1}\n                  onCardClick={this._onCardClick}\n                  isFound={item.found}\n                />\n              ))}\n              {this.state.showCardOnlay && (\n                <div className={\"cardContainerOnlay\"}></div>\n              )}\n            </>\n          ) : (\n            \"loading\"\n          )}\n        </div>\n      </>\n    );\n  }\n\n  _reloadGame = () => {\n    window\n      .fetch(\n        `https://pixabay.com/api/?key=13950983-0cc2df65cb77188cf1269f3fe&image_type=photo&category=food&page=${Math.floor(\n          Math.random() * 10\n        ) + 1}&per_page=10`\n      )\n      .then(res => res.json())\n      .then(res => {\n        let cards = [];\n        res.hits.map(item => {\n          cards.push({ url: item.previewURL, found: false });\n        });\n        cards = cards.concat(cards.slice(0));\n        this._shuffle(cards);\n        this.setState({ cards, isLoading: false, showCardOnlay: false }, () =>\n          this._stopGame()\n        );\n      });\n  };\n\n  _stopGame = () => {\n    const x = [\n      0,\n      1,\n      2,\n      3,\n      4,\n      5,\n      6,\n      7,\n      8,\n      9,\n      10,\n      11,\n      12,\n      13,\n      14,\n      15,\n      16,\n      17,\n      18,\n      19\n    ];\n    setTimeout(() => this.setState({ flippedCards: x }), 45000);\n  };\n\n  _unFlipCards = () => {\n    let cards = [].concat(this.state.cards.slice(0));\n    let flippedCards = [...this.state.flippedCards];\n    if (\n      flippedCards.length === 2 &&\n      cards[flippedCards[0]].url === cards[flippedCards[1]].url\n    ) {\n      cards[flippedCards[0]].found = true;\n      cards[flippedCards[1]].found = true;\n      setTimeout(() => this.setState({ cards }), 700);\n      return;\n    }\n    flippedCards.length === 2 &&\n      (this.clearUnflipCardsTiemout = setTimeout(\n        () => this.setState({ flippedCards: [], cards }),\n        1000\n      ));\n  };\n  _onCardClick = clickedCardId => {\n    if (!!this.clearUnflipCardsTiemout) {\n      clearTimeout(this.clearUnflipCardsTiemout);\n    }\n    let flippedCards =\n      this.state.flippedCards.length === 2\n        ? [clickedCardId]\n        : [...this.state.flippedCards, clickedCardId];\n\n    this.setState({ flippedCards }, () => this._unFlipCards());\n  };\n\n  //  Fisher-Yates shuffle\n  _shuffle = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}